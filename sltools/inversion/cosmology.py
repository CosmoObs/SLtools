# ==================================
# Author: Gabriel Bartosch Caminha - gbcaminha@gmail.com
# ==================================
"""
Package to compute cosmological quantities
"""

import numpy as np

import constants as const

from math import sqrt

from scipy import integrate

class CosmologyLcdm():
    """
    Package to compute cosmological quantities related do the LCDM model
    """
    def __init__(self):
        self.__omega0_m = 0.3
        self.__omega0_l = 0.7
        self.__omega0_k = 1.0 - self.__omega0_m - self.__omega0_l
        self.__h = 0.7
        self.__H0 = self.__h * 100.0 #km/sec/mpc
        self.__H0_sec = self.__H0/const.mpc

        self.__x = np.zeros(100)
        self.__w = np.zeros(100)
        self.__x, self.__w = self.integral_parameters()
################################################################################
    def critical_density(self, z_in):
        """
        Return critical density in the FRW model
        Input:
         - z_in float : red-shift
        Output:
         - \\rho_crit = 3H^2/(8 pi G) [kilo-gram/meter/meter/meter]
        """
        h_adm = self.adm_hubble_param(z_in)
        out = 3.0/8.0/const.pi/const.g_newton*(self.__H0_sec*h_adm)**2.0
        #print out
        #print 1.0/self.__H0_sec/364.0/24.0/60.0/60.0
        return out
################################################################################
    def omega_m(self, z_in):
        """
        Return the mass density at a 'z_in'

        Input:
         - z_in float : red-shift
        Output:
         - omega0_m*(1.0 + z_in)**3.0
        """
        return self.__omega0_m*(1.0 + z_in)**3.0
################################################################################
    def adm_hubble_param(self, z_in):
        """
        Function to comput the adimensional Hubble parameter for LCDM model

        Input:
         - z_in float : red-shift
        Output:
         - sqrt( Om0(1-z)^3 + Ok0(1-z)^2 - Ol )
        """
        one_plus_z = 1.0 + z_in
        return sqrt( self.__omega0_m*one_plus_z**3.0 + \
                     self.__omega0_k*one_plus_z**2.0 + \
                     self.__omega0_l )
################################################################################
    def adm_hubble_param_inv(self, z_in, omega0_m, omega0_k, omega0_l):
        one_plus_z = 1.0 + z_in
        out = sqrt(omega0_m*one_plus_z**3.0 + omega0_k*one_plus_z**2.0 + \
                   omega0_l )
        return 1.0/out
################################################################################
    def int_flat(self, z_init, z_final):#FIXME inpruve documentation
        """
        Compute the eq (3.4) in my msc thesis

        Input:
         - z_init  float : initial red-shift
         - z_final float : final red-shift
        Output:
         - 'I'
        """
        out = integrate.quad(self.adm_hubble_param_inv, z_init, z_final, \
                    args=(self.__omega0_m, self.__omega0_k, self.__omega0_l))
        #print out
        if abs(self.__omega0_k) <= 10E-8:
            return out[0]
        else:
            print 'ERROR in int_flat: you showld use a flat cosmology'
            return 0.0

        #zf_minus_zi = z_final - z_init
        #integral = 0.0

        #for i in range(len(self.__x)):
        #    integral = integral + \
        #               self.__w[i]/self.adm_hubble_param(self.__x[i]*\
        #                                                 zf_minus_zi+z_init)

        #if abs(self.__omega0_k) <= 10E-8:
        #    return integral*zf_minus_zi
        #else:
        #    print 'ERROR in int_flat: you showld use a flat cosmology'
        #    return 0.0
################################################################################
    def ang_dis(self, z_init, z_final):
        """
        Compute the angular diameter distance

        Input:
         - z_init  float : initial red-shift
         - z_final float : final red-shift
        Output:
         - angular diameter distance in megaparsec
        """
        #megaparsec = 3.08568025E19 #[kilo-meters]
        #H0 = 100.0 * self.__h / 3.08568025E19
        #c_light = 299792.458/megaparsec
        #return c_light/H0/(1.0 + z_final)*self.int_flat(z_init, z_final)
        c1 = const.c/self.__H0_sec/const.mpc
        return c1/(1.0 + z_final)*self.int_flat(z_init, z_final)
################################################################################
    def virial_overdensity(self, z_in):
        """
        Function to compute the virial overdensity given by eq (6) (for
        Omega_r = 0) at  Bryan, G.L., & Norman, M.L. 1998, apj, 495, 80 

        Input:
         - z_in float : red-shift
        Output:
         - virial overdensity
        """
        x = self.__omega0_m*((1.0 + z_in)**3.0)/(self.adm_hubble_param(z_in)**2)
        return 177.65287922 + 82.0*x - 39.0*x**2
################################################################################
    def mass_virial(self, r_vir, z_in):
        """
        Compute the virial mass

        Input:
         - r_vir float : virial radius in megaparsec
         - z_in  float : red-shift
        Output:
         - virial mass in units of solar mass
        """
        r_vir = r_vir * const.mpc * 1E3 #from megaparsec to meter
        c1 = 4.0/3.0*const.pi*(r_vir**3.0)
        c2 = self.virial_overdensity(z_in)/( (1.0 + z_in)**3.0 )
        c3 = self.critical_density(z_in)
        return c1*c2*c3/const.solar_mass
################################################################################
    def virial_radius(self, mass_vir, z_in):
        """
        Computes the virial radius

        Input:
         - mass_vir float : virial mass in solar mass
         - z_in     float : red-shift
        Output:
         - virial radius in megaparsec
        """
        cons_1 = 4.0/3.0*const.pi/mass_vir
        cons_2 = self.virial_overdensity(z_in)/( (1.0 + z_in)**3.0 )
        cons_3 = self.critical_density(z_in)/const.solar_mass
        return (cons_1*cons_2*cons_3)**(-1.0/3.0)/const.mpc/1E3
################################################################################
    def lens_sigma_crit(self, z_lens, z_src):
        cons_1 = self.ang_dis(0.0, z_src)/self.ang_dis(z_lens, z_src) \
             /self.ang_dis(0.0, z_lens)
        cons_2 = (const.c*1E3)**2.0/4.0/const.pi/const.g_newton \
                 /const.solar_mass*const.mpc*1E3

        return cons_1*cons_2
################################################################################
    def integral_parameters(self):
        """
        Function to fill the vectos x, w with nunbers to compute the nucemrical
        integration

        Input:
         - NONE
        Output:
         - NONE
        """
        x = np.zeros(100)
        w = np.zeros(100)
        x[0] = 1.431366132793598922035016585141E-04
        w[0] = 3.673172452527929889194713286571E-04
        x[1] = 7.540246802020811323075122345472E-04
        w[1] = 8.546963267590209408636203747278E-04
        x[2] = 1.852432633437428588507600579760E-03
        w[2] = 1.341962685776740661983130742385E-03
        x[3] = 3.437531481278288669756193485227E-03
        w[3] = 1.827980600663169259700868707341E-03
        x[4] = 5.507802378504123019808957906207E-03
        w[4] = 2.312225031711068450740453883441E-03
        x[5] = 8.061229646971479478878563895705E-03
        w[5] = 2.794214001932574485687066356832E-03
        x[6] = 1.109532075654084959381862063310E-02
        w[6] = 3.273474225422597864293416947135E-03
        x[7] = 1.460711211814685883680908773385E-02
        w[7] = 3.749536627732346933533635890967E-03
        x[8] = 1.859317287209222291366472745722E-02
        w[8] = 4.221935734834489709066396301296E-03
        x[9] = 2.304960853725412928127980194404E-02
        w[9] = 4.690209826847212964961997272439E-03
        x[10] = 2.797206493187198717009778192732E-02
        w[10] = 5.153901287434486597205385294274E-03
        x[11] = 3.335573247846024269591680422309E-02
        w[11] = 5.612557011592982439407428785216E-03
        x[12] = 3.919535092733300585265965310100E-02
        w[12] = 6.065728831489716754710173063359E-03
        x[13] = 4.548521450873516114299377477437E-02
        w[13] = 6.512973946485772595849095267795E-03
        x[14] = 5.221917751463650558818585523113E-02
        w[14] = 6.953855351859393289781774427638E-03
        x[15] = 5.939066030749079461159567472350E-02
        w[15] = 7.387942263720664870518817224365E-03
        x[16] = 6.699265575141771789091649225156E-02
        w[16] = 7.814810538773019413238962727064E-03
        x[17] = 7.501773606020434304042510120780E-02
        w[17] = 8.234043088072597743609648546226E-03
        x[18] = 8.345806005579958775086879541050E-02
        w[18] = 8.645230284161796799335952812271E-03
        x[19] = 9.230538083041189834077044906735E-02
        w[19] = 9.047970361064078606561089657134E-03
        x[20] = 1.015510538048427502388904031250E-01
        w[20] = 9.441869806687444577342205320747E-03
        x[21] = 1.111860451752522682689061639394E-01
        w[21] = 9.826543747217662827520001656012E-03
        x[22] = 1.212009407401464233799970315886E-01
        w[22] = 1.020161632310473236173731237386E-02
        x[23] = 1.315859550989896264994172270235E-01
        w[23] = 1.056672105626384715326704366589E-02
        x[24] = 1.423309412134717844011788656644E-01
        w[24] = 1.092150120812366252687208856287E-02
        x[25] = 1.534254003220990036915338805557E-01
        w[25] = 1.126561012816815372794554406255E-02
        x[26] = 1.648584921984295181829338616808E-01
        w[26] = 1.159871159262703538272987202618E-02
        x[27] = 1.766190457429353544149819299491E-01
        w[27] = 1.192048013298409141202949257377E-02
        x[28] = 1.886955698981461204688514499139E-01
        w[28] = 1.223060135397852424277154170795E-02
        x[29] = 2.010762648764106153009834088152E-01
        w[29] = 1.252877224078981395483101124455E-02
        x[30] = 2.137490336893094200476639343833E-01
        w[30] = 1.281470145510407374067618491154E-02
        x[31] = 2.267014939674529272473080254713E-01
        w[31] = 1.308810961977284470503235525030E-02
        x[32] = 2.399209900591184885243478674965E-01
        w[32] = 1.334872959178547494052402555553E-02
        x[33] = 2.533946053959045263681559845281E-01
        w[33] = 1.359630672328845067686753367298E-02
        x[34] = 2.671091751133209957203007434146E-01
        w[34] = 1.383059911039618249117832959882E-02
        x[35] = 2.810512989139842821018078211637E-01
        w[35] = 1.405137782955058999012631915093E-02
        x[36] = 2.952073541608492002197294823418E-01
        w[36] = 1.425842716119757151715941034809E-02
        x[37] = 3.095635091876850486514172189345E-01
        w[37] = 1.445154480056261118992022574048E-02
        x[38] = 3.241057368137891248061066562514E-01
        w[38] = 1.463054205531915535898335178899E-02
        x[39] = 3.388198280497354275553334446158E-01
        w[39] = 1.479524402995631773838347555738E-02
        x[40] = 3.536914059807639842958337794698E-01
        w[40] = 1.494548979666643698238637227860E-02
        x[41] = 3.687059398142482624649574063369E-01
        w[41] = 1.508113255258456374130471289163E-02
        x[42] = 3.838487590775130353648592063109E-01
        w[42] = 1.520203976322743837090722962557E-02
        x[43] = 3.991050679521320199150125063170E-01
        w[43] = 1.530809329199024279577479035197E-02
        x[44] = 4.144599597306983795874657516833E-01
        w[44] = 1.539918951557629582527209066711E-02
        x[45] = 4.298984313819430025382928306499E-01
        w[45] = 1.547523942524552803545745405245E-02
        x[46] = 4.454053982099694386498356379889E-01
        w[46] = 1.553616871378327678188124849612E-02
        x[47] = 4.609657085932816755757812643424E-01
        w[47] = 1.558191784810497061697365239752E-02
        x[48] = 4.765641587892041619589633683063E-01
        w[48] = 1.561244212742467739329921272429E-02
        x[49] = 4.921855077892284824336854853755E-01
        w[49] = 1.562771172693167009981607407099E-02
        x[50] = 5.078144922107715730774657458824E-01
        w[50] = 1.562771172693167009981607407099E-02
        x[51] = 5.234358412107957825298854004359E-01
        w[51] = 1.561244212742467739329921272429E-02
        x[52] = 5.390342914067183244242187356576E-01
        w[52] = 1.558191784810497061697365239752E-02
        x[53] = 5.545946017900305058390131307533E-01
        w[53] = 1.553616871378327678188124849612E-02
        x[54] = 5.701015686180569419505559380923E-01
        w[54] = 1.547523942524552803545745405245E-02
        x[55] = 5.855400402693016204125342483167E-01
        w[55] = 1.539918951557629582527209066711E-02
        x[56] = 6.008949320478680355961387249408E-01
        w[56] = 1.530809329199024279577479035197E-02
        x[57] = 6.161512409224869646351407936891E-01
        w[57] = 1.520203976322743837090722962557E-02
        x[58] = 6.312940601857517375350425936631E-01
        w[58] = 1.508113255258456374130471289163E-02
        x[59] = 6.463085940192360157041662205302E-01
        w[59] = 1.494548979666643698238637227860E-02
        x[60] = 6.611801719502645724446665553842E-01
        w[60] = 1.479524402995631773838347555738E-02
        x[61] = 6.758942631862108196827421124908E-01
        w[61] = 1.463054205531915535898335178899E-02
        x[62] = 6.904364908123149513485827810655E-01
        w[62] = 1.445154480056261118992022574048E-02
        x[63] = 7.047926458391507997802705176582E-01
        w[63] = 1.425842716119757151715941034809E-02
        x[64] = 7.189487010860157178981921788363E-01
        w[64] = 1.405137782955058999012631915093E-02
        x[65] = 7.328908248866790042796992565854E-01
        w[65] = 1.383059911039618249117832959882E-02
        x[66] = 7.466053946040954736318440154719E-01
        w[66] = 1.359630672328845067686753367298E-02
        x[67] = 7.600790099408815114756521325035E-01
        w[67] = 1.334872959178547494052402555553E-02
        x[68] = 7.732985060325470172415407432709E-01
        w[68] = 1.308810961977284470503235525030E-02
        x[69] = 7.862509663106905799523360656167E-01
        w[69] = 1.281470145510407374067618491154E-02
        x[70] = 7.989237351235893846990165911848E-01
        w[70] = 1.252877224078981395483101124455E-02
        x[71] = 8.113044301018539350422997813439E-01
        w[71] = 1.223060135397852424277154170795E-02
        x[72] = 8.233809542570647010961693013087E-01
        w[72] = 1.192048013298409141202949257377E-02
        x[73] = 8.351415078015704818170661383192E-01
        w[73] = 1.159871159262703538272987202618E-02
        x[74] = 8.465745996779010518196173507022E-01
        w[74] = 1.126561012816815372794554406255E-02
        x[75] = 8.576690587865282155988211343356E-01
        w[75] = 1.092150120812366252687208856287E-02
        x[76] = 8.684140449010103735005827729765E-01
        w[76] = 1.056672105626384715326704366589E-02
        x[77] = 8.787990592598535766200029684114E-01
        w[77] = 1.020161632310473236173731237386E-02
        x[78] = 8.888139548247477872422450673184E-01
        w[78] = 9.826543747217662827520001656012E-03
        x[79] = 8.984489461951572497611095968750E-01
        w[79] = 9.441869806687444577342205320747E-03
        x[80] = 9.076946191695880461480783196748E-01
        w[80] = 9.047970361064078606561089657134E-03
        x[81] = 9.165419399442004122491312045895E-01
        w[81] = 8.645230284161796799335952812271E-03
        x[82] = 9.249822639397956569595748987922E-01
        w[82] = 8.234043088072597743609648546226E-03
        x[83] = 9.330073442485822265979322764906E-01
        w[83] = 7.814810538773019413238962727064E-03
        x[84] = 9.406093396925092608995555565343E-01
        w[84] = 7.387942263720664870518817224365E-03
        x[85] = 9.477808224853634389006629135110E-01
        w[85] = 6.953855351859393289781774427638E-03
        x[86] = 9.545147854912647833458549939678E-01
        w[86] = 6.512973946485772595849095267795E-03
        x[87] = 9.608046490726669386361891156412E-01
        w[87] = 6.065728831489716754710173063359E-03
        x[88] = 9.666442675215397573040831957769E-01
        w[88] = 5.612557011592982439407428785216E-03
        x[89] = 9.720279350681280128299022180727E-01
        w[89] = 5.153901287434486597205385294274E-03
        x[90] = 9.769503914627458707187201980560E-01
        w[90] = 4.690209826847212964961997272439E-03
        x[91] = 9.814068271279077215751840412850E-01
        w[91] = 4.221935734834489709066396301296E-03
        x[92] = 9.853928878818531966743421435240E-01
        w[92] = 3.749536627732346933533635890967E-03
        x[93] = 9.889046792434591504061813793669E-01
        w[93] = 3.273474225422597864293416947135E-03
        x[94] = 9.919387703530284650099702048465E-01
        w[94] = 2.794214001932574485687066356832E-03
        x[95] = 9.944921976214958769801910420938E-01
        w[95] = 2.312225031711068450740453883441E-03
        x[96] = 9.965624685187217668413950377726E-01
        w[96] = 1.827980600663169259700868707341E-03
        x[97] = 9.981475673665625159003411681624E-01
        w[97] = 1.341962685776740661983130742385E-03
        x[98] = 9.992459753197979743788437190233E-01
        w[98] = 8.546963267590209408636203747278E-04
        x[99] = 9.998568633867206401077964983415E-01
        w[99] = 3.673172452527929889194713286571E-04
        return x, w
