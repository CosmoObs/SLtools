/** @file
* Example of doxygen documentation for C functions FIXME. 
*/

/** @package general_methods
*  Package with general functions, root finders, integrators etc.
*
*  Detailed descrition FIXME
*
*/

#ifndef GENERAL_METHODS_H
#define GENERAL_METHODS_H


#include <cmath> 

#include <gsl/gsl_errno.h>
#include <gsl/gsl_math.h>
#include <gsl/gsl_roots.h>

//!  Root finder that use the gsl library, (brent method)
//!
//!  For a detailed description see: http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Root_002dFinding.html. To compile: g++ -Wall  main.cpp `pkg-config gsl --cflags --libs`
/*!
  \param f_in function in which the root will be found
  \param pot_params function parameters
  \param est_err vector where the estimated error will be written
  \param x_lo lower value to be considered by the root finder 
  \param x_hi upper value to be considered by the root finder
  \param max_iter maximum number of interactions
  \param relative_error relative error
  \param v !=0 for verbose mode
  \return the root
  \return est_err_out
*/
double root_find(double f_in(double,void*), void *pot_params, double *est_err_out=NULL, 
                 double x_lo = 1E-4, double x_hi = 10.0, int max_iter = 100, double relative_error = 1E-4, int v=0){
  double r = 0.0;

  gsl_function F;

  F.function = f_in;
  F.params = pot_params;

  int status;
  int iter = 0;

  const gsl_root_fsolver_type *T;
  gsl_root_fsolver *s;
  T = gsl_root_fsolver_brent;
  s = gsl_root_fsolver_alloc (T);
  gsl_root_fsolver_set (s, &F, x_lo, x_hi);

  if(v) printf ("using %s method\n",gsl_root_fsolver_name (s));
  if(v) printf ("%5s [%9s, %9s] %9s %9s\n","iter", "lower", "upper", "root", "err(est)");

  do{
    iter++;
    status = gsl_root_fsolver_iterate (s);
    r = gsl_root_fsolver_root (s);
    x_lo = gsl_root_fsolver_x_lower (s);
    x_hi = gsl_root_fsolver_x_upper (s);
    status = gsl_root_test_interval (x_lo, x_hi,0, relative_error);

    if (v && status == GSL_SUCCESS) printf("Converged:\n");
        if(v) printf ("%5d [%.7f, %.7f] %.7f %.7f\n",iter, x_lo, x_hi, r, x_hi - x_lo);
  }while (status == GSL_CONTINUE && iter < max_iter);

  if(est_err_out != NULL) *est_err_out = x_hi - x_lo;

  return r;
}

#define PI 3.1415926535897931159979634685441851615905761718750

/*function: gauleg
  descrption: Given the lower and upper limits of integration x1 and x2, and given n, this routine returns arrays x[1..n] and w[1..n] of length n, containing the abscissas and weights of the Gauss-Legendre n-point quadrature formula
*/
void gauleg(double x1, double x2, double x[], double w[], int n, double EPS=1.0e-15)
{
  //const DP EPS=1.0e-14;
  int m,j,i;
  double z1,z,xm,xl,pp,p3,p2,p1;

  //int n=x.size();
  m=(n+1)/2;
  xm=0.5*(x2+x1);
  xl=0.5*(x2-x1);
  for (i=0;i<m;i++) {
    z=cos(PI*(i+0.75)/(n+0.5));
    do {
      p1=1.0;
      p2=0.0;
      for (j=0;j<n;j++) {
        p3=p2;
        p2=p1;
        p1=((2.0*j+1.0)*z*p2-j*p3)/(j+1);
        }
      pp=n*(z*p1-p2)/(z*z-1.0);
      z1=z;
      z=z1-p1/pp;
    } while (fabs(z-z1) > EPS);
    x[i]=xm-xl*z;
    x[n-1-i]=xm+xl*z;
    w[i]=2.0*xl/((1.0-z*z)*pp*pp);
    w[n-1-i]=w[i];
  }
}

double IntGaulegDef(double f(double x, double par[]), double par_in[], double x_init, double x_final, int n)
{
  double x[n],w[n];
  double INT = 0.0;

  gauleg(x_init,x_final,x,w,n);

  for(int i=0;i<n;i++) INT += w[i]*f(x[i],par_in);

  return INT;
}

double IntGaulegSub(double f(double x, double par[]), double par_in[], double x_init, double x_final, int n)
{
  double x[n],w[n];
  double INT = 0.0;
  double Xf_M_Xi = x_final-x_init;

  gauleg(0.0,1.0,x,w,n);

  for(int i=0;i<n;i++) INT += w[i]*f(x[i]*Xf_M_Xi+x_init, par_in);

  return INT*Xf_M_Xi;
}

double IntGaulegSub10(double f(double x, double par[]), double par_in[], double x_init, double x_final)
{
  int n=10;
  double x[n],w[n];
  double INT = 0.0;
  double Xf_M_Xi = x_final-x_init;

  x[0]=1.304673574141412828453212569002E-02;  w[0]=3.333567215434185548872392246267E-02;
  x[1]=6.746831665550773182715715847735E-02;  w[1]=7.472567457529026568874286340360E-02;
  x[2]=1.602952158504877822053913405398E-01;  w[2]=1.095431812579910901828128544366E-01;
  x[3]=2.833023029353763933002596786537E-01;  w[3]=1.346333596549981193035705473449E-01;
  x[4]=4.255628305091844199026240858075E-01;  w[4]=1.477621123573764627678883698536E-01;
  x[5]=5.744371694908155800973759141925E-01;  w[5]=1.477621123573764627678883698536E-01;
  x[6]=7.166976970646236066997403213463E-01;  w[6]=1.346333596549981193035705473449E-01;
  x[7]=8.397047841495122177946086594602E-01;  w[7]=1.095431812579910901828128544366E-01;
  x[8]=9.325316833444923236839940727805E-01;  w[8]=7.472567457529026568874286340360E-02;
  x[9]=9.869532642585858717154678743100E-01;  w[9]=3.333567215434185548872392246267E-02;

  for(int i=0;i<n;i++) INT += w[i]*f(x[i]*Xf_M_Xi+x_init, par_in);

  return INT*Xf_M_Xi;
}

double IntGaulegSub50(double f(double x, double par[]), double par_in[], double x_init, double x_final)
{
  int n=50;
  double x[n],w[n];
  double INT = 0.0;
  double Xf_M_Xi = x_final-x_init;

  x[0]=5.667977899644904837828107702080E-04;  w[0]=1.454311276577351531164028486387E-03;
  x[1]=2.984015283954644104369435808621E-03;  w[1]=3.379899597872739608339642813917E-03;
  x[2]=7.322957975997079760333008380258E-03;  w[2]=5.295274191825523335541703318086E-03;
  x[3]=1.356780744665397886450364239863E-02;  w[3]=7.190411380742786975894809131660E-03;
  x[4]=2.169452237859603727088142477442E-02;  w[4]=9.057780356744668179280743913750E-03;
  x[5]=3.167169052756102498591417315765E-02;  w[5]=1.089012158506239870414677994859E-02;
  x[6]=4.346072167210407455328891046520E-02;  w[6]=1.268033678500606227512736978724E-02;
  x[7]=5.701601023819347080490160806221E-02;  w[7]=1.442149679026755171307172531669E-02;
  x[8]=7.228511528502695737685712629172E-02;  w[8]=1.610686411178897589624448016821E-02;
  x[9]=8.920896457033200555031271505868E-02;  w[9]=1.772991780757304097759785577182E-02;
  x[10]=1.077220835498003959074253543804E-01;  w[10]=1.928437830629382843117269885624E-02;
  x[11]=1.277528488869657530280221635621E-01;  w[11]=2.076423154507381699240831096631E-02;
  x[12]=1.492237656465889017454173881561E-01;  w[12]=2.216375216940163345169523267941E-02;
  x[13]=1.720517671572803219959268972161E-01;  w[13]=2.347752565197422022769124794195E-02;
  x[14]=1.961485364075248871706946829363E-01;  w[14]=2.470046922473319306323702448935E-02;
  x[15]=2.214208477426749532845917656232E-01;  w[15]=2.582785153479057876912960978188E-02;
  x[16]=2.477709275462678939483396334253E-01;  w[16]=2.685531094449813624414069579416E-02;
  x[17]=2.750968325129806157924861054198E-01;  w[17]=2.777887240310627017803035698762E-02;
  x[18]=3.032928440512174250720534018910E-01;  w[18]=2.859496282386419716003977953278E-02;
  x[19]=3.322498772902813257701382099185E-01;  w[19]=2.930042490661122558948115113253E-02;
  x[20]=3.618559031102339673680035048164E-01;  w[20]=2.989252935213273024150915091468E-02;
  x[21]=3.919963815619791347444333950989E-01;  w[21]=3.036898542088510566383519062583E-02;
  x[22]=4.225547050009270666492966483929E-01;  w[22]=3.072794979515837757166885069182E-02;
  x[23]=4.534126492199569424812466422736E-01;  w[23]=3.096803371034160742847340941353E-02;
  x[24]=4.844508308364055548800308770296E-01;  w[24]=3.108830832767365409674553689001E-02;
  x[25]=5.155491691635943896088178917125E-01;  w[25]=3.108830832767365409674553689001E-02;
  x[26]=5.465873507800430575187533577264E-01;  w[26]=3.096803371034160742847340941353E-02;
  x[27]=5.774452949990729333507033516071E-01;  w[27]=3.072794979515837757166885069182E-02;
  x[28]=6.080036184380208652555666049011E-01;  w[28]=3.036898542088510566383519062583E-02;
  x[29]=6.381440968897660326319964951836E-01;  w[29]=2.989252935213273024150915091468E-02;
  x[30]=6.677501227097186742298617900815E-01;  w[30]=2.930042490661122558948115113253E-02;
  x[31]=6.967071559487825194167953668511E-01;  w[31]=2.859496282386419716003977953278E-02;
  x[32]=7.249031674870194397186651258380E-01;  w[32]=2.777887240310627017803035698762E-02;
  x[33]=7.522290724537321615628115978325E-01;  w[33]=2.685531094449813624414069579416E-02;
  x[34]=7.785791522573251022265594656346E-01;  w[34]=2.582785153479057876912960978188E-02;
  x[35]=8.038514635924751683404565483215E-01;  w[35]=2.470046922473319306323702448935E-02;
  x[36]=8.279482328427196780040731027839E-01;  w[36]=2.347752565197422022769124794195E-02;
  x[37]=8.507762343534110982545826118439E-01;  w[37]=2.216375216940163345169523267941E-02;
  x[38]=8.722471511130343024831290676957E-01;  w[38]=2.076423154507381699240831096631E-02;
  x[39]=8.922779164501996040925746456196E-01;  w[39]=1.928437830629382843117269885624E-02;
  x[40]=9.107910354296679944496872849413E-01;  w[40]=1.772991780757304097759785577182E-02;
  x[41]=9.277148847149729871119916424504E-01;  w[41]=1.610686411178897589624448016821E-02;
  x[42]=9.429839897618065291950983919378E-01;  w[42]=1.442149679026755171307172531669E-02;
  x[43]=9.565392783278958699355598582770E-01;  w[43]=1.268033678500606227512736978724E-02;
  x[44]=9.683283094724389750140858268423E-01;  w[44]=1.089012158506239870414677994859E-02;
  x[45]=9.783054776214039627291185752256E-01;  w[45]=9.057780356744668179280743913750E-03;
  x[46]=9.864321925533460211354963576014E-01;  w[46]=7.190411380742786975894809131660E-03;
  x[47]=9.926770420240029757508182228776E-01;  w[47]=5.295274191825523335541703318086E-03;
  x[48]=9.970159847160453558956305641914E-01;  w[48]=3.379899597872739608339642813917E-03;
  x[49]=9.994332022100355095162171892298E-01;  w[49]=1.454311276577351531164028486387E-03;

  for(int i=0;i<n;i++) INT += w[i]*f(x[i]*Xf_M_Xi+x_init, par_in);

  return INT*Xf_M_Xi;
}

double IntGaulegSub100(double f(double x, double par[]), double par_in[], double x_init, double x_final)
{
  int n=100;
  double x[n],w[n];
  double INT = 0.0;
  double Xf_M_Xi = x_final-x_init;

  x[0]=1.431366132793598922035016585141E-04;  w[0]=3.673172452527929889194713286571E-04;
  x[1]=7.540246802020811323075122345472E-04;  w[1]=8.546963267590209408636203747278E-04;
  x[2]=1.852432633437428588507600579760E-03;  w[2]=1.341962685776740661983130742385E-03;
  x[3]=3.437531481278288669756193485227E-03;  w[3]=1.827980600663169259700868707341E-03;
  x[4]=5.507802378504123019808957906207E-03;  w[4]=2.312225031711068450740453883441E-03;
  x[5]=8.061229646971479478878563895705E-03;  w[5]=2.794214001932574485687066356832E-03;
  x[6]=1.109532075654084959381862063310E-02;  w[6]=3.273474225422597864293416947135E-03;
  x[7]=1.460711211814685883680908773385E-02;  w[7]=3.749536627732346933533635890967E-03;
  x[8]=1.859317287209222291366472745722E-02;  w[8]=4.221935734834489709066396301296E-03;
  x[9]=2.304960853725412928127980194404E-02;  w[9]=4.690209826847212964961997272439E-03;
  x[10]=2.797206493187198717009778192732E-02;  w[10]=5.153901287434486597205385294274E-03;
  x[11]=3.335573247846024269591680422309E-02;  w[11]=5.612557011592982439407428785216E-03;
  x[12]=3.919535092733300585265965310100E-02;  w[12]=6.065728831489716754710173063359E-03;
  x[13]=4.548521450873516114299377477437E-02;  w[13]=6.512973946485772595849095267795E-03;
  x[14]=5.221917751463650558818585523113E-02;  w[14]=6.953855351859393289781774427638E-03;
  x[15]=5.939066030749079461159567472350E-02;  w[15]=7.387942263720664870518817224365E-03;
  x[16]=6.699265575141771789091649225156E-02;  w[16]=7.814810538773019413238962727064E-03;
  x[17]=7.501773606020434304042510120780E-02;  w[17]=8.234043088072597743609648546226E-03;
  x[18]=8.345806005579958775086879541050E-02;  w[18]=8.645230284161796799335952812271E-03;
  x[19]=9.230538083041189834077044906735E-02;  w[19]=9.047970361064078606561089657134E-03;
  x[20]=1.015510538048427502388904031250E-01;  w[20]=9.441869806687444577342205320747E-03;
  x[21]=1.111860451752522682689061639394E-01;  w[21]=9.826543747217662827520001656012E-03;
  x[22]=1.212009407401464233799970315886E-01;  w[22]=1.020161632310473236173731237386E-02;
  x[23]=1.315859550989896264994172270235E-01;  w[23]=1.056672105626384715326704366589E-02;
  x[24]=1.423309412134717844011788656644E-01;  w[24]=1.092150120812366252687208856287E-02;
  x[25]=1.534254003220990036915338805557E-01;  w[25]=1.126561012816815372794554406255E-02;
  x[26]=1.648584921984295181829338616808E-01;  w[26]=1.159871159262703538272987202618E-02;
  x[27]=1.766190457429353544149819299491E-01;  w[27]=1.192048013298409141202949257377E-02;
  x[28]=1.886955698981461204688514499139E-01;  w[28]=1.223060135397852424277154170795E-02;
  x[29]=2.010762648764106153009834088152E-01;  w[29]=1.252877224078981395483101124455E-02;
  x[30]=2.137490336893094200476639343833E-01;  w[30]=1.281470145510407374067618491154E-02;
  x[31]=2.267014939674529272473080254713E-01;  w[31]=1.308810961977284470503235525030E-02;
  x[32]=2.399209900591184885243478674965E-01;  w[32]=1.334872959178547494052402555553E-02;
  x[33]=2.533946053959045263681559845281E-01;  w[33]=1.359630672328845067686753367298E-02;
  x[34]=2.671091751133209957203007434146E-01;  w[34]=1.383059911039618249117832959882E-02;
  x[35]=2.810512989139842821018078211637E-01;  w[35]=1.405137782955058999012631915093E-02;
  x[36]=2.952073541608492002197294823418E-01;  w[36]=1.425842716119757151715941034809E-02;
  x[37]=3.095635091876850486514172189345E-01;  w[37]=1.445154480056261118992022574048E-02;
  x[38]=3.241057368137891248061066562514E-01;  w[38]=1.463054205531915535898335178899E-02;
  x[39]=3.388198280497354275553334446158E-01;  w[39]=1.479524402995631773838347555738E-02;
  x[40]=3.536914059807639842958337794698E-01;  w[40]=1.494548979666643698238637227860E-02;
  x[41]=3.687059398142482624649574063369E-01;  w[41]=1.508113255258456374130471289163E-02;
  x[42]=3.838487590775130353648592063109E-01;  w[42]=1.520203976322743837090722962557E-02;
  x[43]=3.991050679521320199150125063170E-01;  w[43]=1.530809329199024279577479035197E-02;
  x[44]=4.144599597306983795874657516833E-01;  w[44]=1.539918951557629582527209066711E-02;
  x[45]=4.298984313819430025382928306499E-01;  w[45]=1.547523942524552803545745405245E-02;
  x[46]=4.454053982099694386498356379889E-01;  w[46]=1.553616871378327678188124849612E-02;
  x[47]=4.609657085932816755757812643424E-01;  w[47]=1.558191784810497061697365239752E-02;
  x[48]=4.765641587892041619589633683063E-01;  w[48]=1.561244212742467739329921272429E-02;
  x[49]=4.921855077892284824336854853755E-01;  w[49]=1.562771172693167009981607407099E-02;
  x[50]=5.078144922107715730774657458824E-01;  w[50]=1.562771172693167009981607407099E-02;
  x[51]=5.234358412107957825298854004359E-01;  w[51]=1.561244212742467739329921272429E-02;
  x[52]=5.390342914067183244242187356576E-01;  w[52]=1.558191784810497061697365239752E-02;
  x[53]=5.545946017900305058390131307533E-01;  w[53]=1.553616871378327678188124849612E-02;
  x[54]=5.701015686180569419505559380923E-01;  w[54]=1.547523942524552803545745405245E-02;
  x[55]=5.855400402693016204125342483167E-01;  w[55]=1.539918951557629582527209066711E-02;
  x[56]=6.008949320478680355961387249408E-01;  w[56]=1.530809329199024279577479035197E-02;
  x[57]=6.161512409224869646351407936891E-01;  w[57]=1.520203976322743837090722962557E-02;
  x[58]=6.312940601857517375350425936631E-01;  w[58]=1.508113255258456374130471289163E-02;
  x[59]=6.463085940192360157041662205302E-01;  w[59]=1.494548979666643698238637227860E-02;
  x[60]=6.611801719502645724446665553842E-01;  w[60]=1.479524402995631773838347555738E-02;
  x[61]=6.758942631862108196827421124908E-01;  w[61]=1.463054205531915535898335178899E-02;
  x[62]=6.904364908123149513485827810655E-01;  w[62]=1.445154480056261118992022574048E-02;
  x[63]=7.047926458391507997802705176582E-01;  w[63]=1.425842716119757151715941034809E-02;
  x[64]=7.189487010860157178981921788363E-01;  w[64]=1.405137782955058999012631915093E-02;
  x[65]=7.328908248866790042796992565854E-01;  w[65]=1.383059911039618249117832959882E-02;
  x[66]=7.466053946040954736318440154719E-01;  w[66]=1.359630672328845067686753367298E-02;
  x[67]=7.600790099408815114756521325035E-01;  w[67]=1.334872959178547494052402555553E-02;
  x[68]=7.732985060325470172415407432709E-01;  w[68]=1.308810961977284470503235525030E-02;
  x[69]=7.862509663106905799523360656167E-01;  w[69]=1.281470145510407374067618491154E-02;
  x[70]=7.989237351235893846990165911848E-01;  w[70]=1.252877224078981395483101124455E-02;
  x[71]=8.113044301018539350422997813439E-01;  w[71]=1.223060135397852424277154170795E-02;
  x[72]=8.233809542570647010961693013087E-01;  w[72]=1.192048013298409141202949257377E-02;
  x[73]=8.351415078015704818170661383192E-01;  w[73]=1.159871159262703538272987202618E-02;
  x[74]=8.465745996779010518196173507022E-01;  w[74]=1.126561012816815372794554406255E-02;
  x[75]=8.576690587865282155988211343356E-01;  w[75]=1.092150120812366252687208856287E-02;
  x[76]=8.684140449010103735005827729765E-01;  w[76]=1.056672105626384715326704366589E-02;
  x[77]=8.787990592598535766200029684114E-01;  w[77]=1.020161632310473236173731237386E-02;
  x[78]=8.888139548247477872422450673184E-01;  w[78]=9.826543747217662827520001656012E-03;
  x[79]=8.984489461951572497611095968750E-01;  w[79]=9.441869806687444577342205320747E-03;
  x[80]=9.076946191695880461480783196748E-01;  w[80]=9.047970361064078606561089657134E-03;
  x[81]=9.165419399442004122491312045895E-01;  w[81]=8.645230284161796799335952812271E-03;
  x[82]=9.249822639397956569595748987922E-01;  w[82]=8.234043088072597743609648546226E-03;
  x[83]=9.330073442485822265979322764906E-01;  w[83]=7.814810538773019413238962727064E-03;
  x[84]=9.406093396925092608995555565343E-01;  w[84]=7.387942263720664870518817224365E-03;
  x[85]=9.477808224853634389006629135110E-01;  w[85]=6.953855351859393289781774427638E-03;
  x[86]=9.545147854912647833458549939678E-01;  w[86]=6.512973946485772595849095267795E-03;
  x[87]=9.608046490726669386361891156412E-01;  w[87]=6.065728831489716754710173063359E-03;
  x[88]=9.666442675215397573040831957769E-01;  w[88]=5.612557011592982439407428785216E-03;
  x[89]=9.720279350681280128299022180727E-01;  w[89]=5.153901287434486597205385294274E-03;
  x[90]=9.769503914627458707187201980560E-01;  w[90]=4.690209826847212964961997272439E-03;
  x[91]=9.814068271279077215751840412850E-01;  w[91]=4.221935734834489709066396301296E-03;
  x[92]=9.853928878818531966743421435240E-01;  w[92]=3.749536627732346933533635890967E-03;
  x[93]=9.889046792434591504061813793669E-01;  w[93]=3.273474225422597864293416947135E-03;
  x[94]=9.919387703530284650099702048465E-01;  w[94]=2.794214001932574485687066356832E-03;
  x[95]=9.944921976214958769801910420938E-01;  w[95]=2.312225031711068450740453883441E-03;
  x[96]=9.965624685187217668413950377726E-01;  w[96]=1.827980600663169259700868707341E-03;
  x[97]=9.981475673665625159003411681624E-01;  w[97]=1.341962685776740661983130742385E-03;
  x[98]=9.992459753197979743788437190233E-01;  w[98]=8.546963267590209408636203747278E-04;
  x[99]=9.998568633867206401077964983415E-01;  w[99]=3.673172452527929889194713286571E-04;

  for(int i=0;i<n;i++) INT += w[i]*f(x[i]*Xf_M_Xi+x_init, par_in);

  return INT*Xf_M_Xi;
}

double IntGaulegSub50_elip_model(double f(double , double *, double g(double , double *) ), double par_in[], double x_init, double x_final, double conv(double , double *))
{
  int n=50;
  double x[n],w[n];
  double INT = 0.0;
  double Xf_M_Xi = x_final-x_init;

  x[0]=5.667977899644904837828107702080E-04;  w[0]=1.454311276577351531164028486387E-03;
  x[1]=2.984015283954644104369435808621E-03;  w[1]=3.379899597872739608339642813917E-03;
  x[2]=7.322957975997079760333008380258E-03;  w[2]=5.295274191825523335541703318086E-03;
  x[3]=1.356780744665397886450364239863E-02;  w[3]=7.190411380742786975894809131660E-03;
  x[4]=2.169452237859603727088142477442E-02;  w[4]=9.057780356744668179280743913750E-03;
  x[5]=3.167169052756102498591417315765E-02;  w[5]=1.089012158506239870414677994859E-02;
  x[6]=4.346072167210407455328891046520E-02;  w[6]=1.268033678500606227512736978724E-02;
  x[7]=5.701601023819347080490160806221E-02;  w[7]=1.442149679026755171307172531669E-02;
  x[8]=7.228511528502695737685712629172E-02;  w[8]=1.610686411178897589624448016821E-02;
  x[9]=8.920896457033200555031271505868E-02;  w[9]=1.772991780757304097759785577182E-02;
  x[10]=1.077220835498003959074253543804E-01;  w[10]=1.928437830629382843117269885624E-02;
  x[11]=1.277528488869657530280221635621E-01;  w[11]=2.076423154507381699240831096631E-02;
  x[12]=1.492237656465889017454173881561E-01;  w[12]=2.216375216940163345169523267941E-02;
  x[13]=1.720517671572803219959268972161E-01;  w[13]=2.347752565197422022769124794195E-02;
  x[14]=1.961485364075248871706946829363E-01;  w[14]=2.470046922473319306323702448935E-02;
  x[15]=2.214208477426749532845917656232E-01;  w[15]=2.582785153479057876912960978188E-02;
  x[16]=2.477709275462678939483396334253E-01;  w[16]=2.685531094449813624414069579416E-02;
  x[17]=2.750968325129806157924861054198E-01;  w[17]=2.777887240310627017803035698762E-02;
  x[18]=3.032928440512174250720534018910E-01;  w[18]=2.859496282386419716003977953278E-02;
  x[19]=3.322498772902813257701382099185E-01;  w[19]=2.930042490661122558948115113253E-02;
  x[20]=3.618559031102339673680035048164E-01;  w[20]=2.989252935213273024150915091468E-02;
  x[21]=3.919963815619791347444333950989E-01;  w[21]=3.036898542088510566383519062583E-02;
  x[22]=4.225547050009270666492966483929E-01;  w[22]=3.072794979515837757166885069182E-02;
  x[23]=4.534126492199569424812466422736E-01;  w[23]=3.096803371034160742847340941353E-02;
  x[24]=4.844508308364055548800308770296E-01;  w[24]=3.108830832767365409674553689001E-02;
  x[25]=5.155491691635943896088178917125E-01;  w[25]=3.108830832767365409674553689001E-02;
  x[26]=5.465873507800430575187533577264E-01;  w[26]=3.096803371034160742847340941353E-02;
  x[27]=5.774452949990729333507033516071E-01;  w[27]=3.072794979515837757166885069182E-02;
  x[28]=6.080036184380208652555666049011E-01;  w[28]=3.036898542088510566383519062583E-02;
  x[29]=6.381440968897660326319964951836E-01;  w[29]=2.989252935213273024150915091468E-02;
  x[30]=6.677501227097186742298617900815E-01;  w[30]=2.930042490661122558948115113253E-02;
  x[31]=6.967071559487825194167953668511E-01;  w[31]=2.859496282386419716003977953278E-02;
  x[32]=7.249031674870194397186651258380E-01;  w[32]=2.777887240310627017803035698762E-02;
  x[33]=7.522290724537321615628115978325E-01;  w[33]=2.685531094449813624414069579416E-02;
  x[34]=7.785791522573251022265594656346E-01;  w[34]=2.582785153479057876912960978188E-02;
  x[35]=8.038514635924751683404565483215E-01;  w[35]=2.470046922473319306323702448935E-02;
  x[36]=8.279482328427196780040731027839E-01;  w[36]=2.347752565197422022769124794195E-02;
  x[37]=8.507762343534110982545826118439E-01;  w[37]=2.216375216940163345169523267941E-02;
  x[38]=8.722471511130343024831290676957E-01;  w[38]=2.076423154507381699240831096631E-02;
  x[39]=8.922779164501996040925746456196E-01;  w[39]=1.928437830629382843117269885624E-02;
  x[40]=9.107910354296679944496872849413E-01;  w[40]=1.772991780757304097759785577182E-02;
  x[41]=9.277148847149729871119916424504E-01;  w[41]=1.610686411178897589624448016821E-02;
  x[42]=9.429839897618065291950983919378E-01;  w[42]=1.442149679026755171307172531669E-02;
  x[43]=9.565392783278958699355598582770E-01;  w[43]=1.268033678500606227512736978724E-02;
  x[44]=9.683283094724389750140858268423E-01;  w[44]=1.089012158506239870414677994859E-02;
  x[45]=9.783054776214039627291185752256E-01;  w[45]=9.057780356744668179280743913750E-03;
  x[46]=9.864321925533460211354963576014E-01;  w[46]=7.190411380742786975894809131660E-03;
  x[47]=9.926770420240029757508182228776E-01;  w[47]=5.295274191825523335541703318086E-03;
  x[48]=9.970159847160453558956305641914E-01;  w[48]=3.379899597872739608339642813917E-03;
  x[49]=9.994332022100355095162171892298E-01;  w[49]=1.454311276577351531164028486387E-03;

  for(int i=0;i<n;i++) INT += w[i]*f(x[i]*Xf_M_Xi+x_init, par_in, conv);

  return INT*Xf_M_Xi;
}

double IntGaulegSub100_elip_model(double f(double , double *, double g(double , double *) ), double par_in[], double x_init, double x_final, double conv(double , double *))
{
  int n=100;
  double x[n],w[n];
  double INT = 0.0;
  double Xf_M_Xi = x_final-x_init;

  x[0]=1.431366132793598922035016585141E-04;  w[0]=3.673172452527929889194713286571E-04;
  x[1]=7.540246802020811323075122345472E-04;  w[1]=8.546963267590209408636203747278E-04;
  x[2]=1.852432633437428588507600579760E-03;  w[2]=1.341962685776740661983130742385E-03;
  x[3]=3.437531481278288669756193485227E-03;  w[3]=1.827980600663169259700868707341E-03;
  x[4]=5.507802378504123019808957906207E-03;  w[4]=2.312225031711068450740453883441E-03;
  x[5]=8.061229646971479478878563895705E-03;  w[5]=2.794214001932574485687066356832E-03;
  x[6]=1.109532075654084959381862063310E-02;  w[6]=3.273474225422597864293416947135E-03;
  x[7]=1.460711211814685883680908773385E-02;  w[7]=3.749536627732346933533635890967E-03;
  x[8]=1.859317287209222291366472745722E-02;  w[8]=4.221935734834489709066396301296E-03;
  x[9]=2.304960853725412928127980194404E-02;  w[9]=4.690209826847212964961997272439E-03;
  x[10]=2.797206493187198717009778192732E-02;  w[10]=5.153901287434486597205385294274E-03;
  x[11]=3.335573247846024269591680422309E-02;  w[11]=5.612557011592982439407428785216E-03;
  x[12]=3.919535092733300585265965310100E-02;  w[12]=6.065728831489716754710173063359E-03;
  x[13]=4.548521450873516114299377477437E-02;  w[13]=6.512973946485772595849095267795E-03;
  x[14]=5.221917751463650558818585523113E-02;  w[14]=6.953855351859393289781774427638E-03;
  x[15]=5.939066030749079461159567472350E-02;  w[15]=7.387942263720664870518817224365E-03;
  x[16]=6.699265575141771789091649225156E-02;  w[16]=7.814810538773019413238962727064E-03;
  x[17]=7.501773606020434304042510120780E-02;  w[17]=8.234043088072597743609648546226E-03;
  x[18]=8.345806005579958775086879541050E-02;  w[18]=8.645230284161796799335952812271E-03;
  x[19]=9.230538083041189834077044906735E-02;  w[19]=9.047970361064078606561089657134E-03;
  x[20]=1.015510538048427502388904031250E-01;  w[20]=9.441869806687444577342205320747E-03;
  x[21]=1.111860451752522682689061639394E-01;  w[21]=9.826543747217662827520001656012E-03;
  x[22]=1.212009407401464233799970315886E-01;  w[22]=1.020161632310473236173731237386E-02;
  x[23]=1.315859550989896264994172270235E-01;  w[23]=1.056672105626384715326704366589E-02;
  x[24]=1.423309412134717844011788656644E-01;  w[24]=1.092150120812366252687208856287E-02;
  x[25]=1.534254003220990036915338805557E-01;  w[25]=1.126561012816815372794554406255E-02;
  x[26]=1.648584921984295181829338616808E-01;  w[26]=1.159871159262703538272987202618E-02;
  x[27]=1.766190457429353544149819299491E-01;  w[27]=1.192048013298409141202949257377E-02;
  x[28]=1.886955698981461204688514499139E-01;  w[28]=1.223060135397852424277154170795E-02;
  x[29]=2.010762648764106153009834088152E-01;  w[29]=1.252877224078981395483101124455E-02;
  x[30]=2.137490336893094200476639343833E-01;  w[30]=1.281470145510407374067618491154E-02;
  x[31]=2.267014939674529272473080254713E-01;  w[31]=1.308810961977284470503235525030E-02;
  x[32]=2.399209900591184885243478674965E-01;  w[32]=1.334872959178547494052402555553E-02;
  x[33]=2.533946053959045263681559845281E-01;  w[33]=1.359630672328845067686753367298E-02;
  x[34]=2.671091751133209957203007434146E-01;  w[34]=1.383059911039618249117832959882E-02;
  x[35]=2.810512989139842821018078211637E-01;  w[35]=1.405137782955058999012631915093E-02;
  x[36]=2.952073541608492002197294823418E-01;  w[36]=1.425842716119757151715941034809E-02;
  x[37]=3.095635091876850486514172189345E-01;  w[37]=1.445154480056261118992022574048E-02;
  x[38]=3.241057368137891248061066562514E-01;  w[38]=1.463054205531915535898335178899E-02;
  x[39]=3.388198280497354275553334446158E-01;  w[39]=1.479524402995631773838347555738E-02;
  x[40]=3.536914059807639842958337794698E-01;  w[40]=1.494548979666643698238637227860E-02;
  x[41]=3.687059398142482624649574063369E-01;  w[41]=1.508113255258456374130471289163E-02;
  x[42]=3.838487590775130353648592063109E-01;  w[42]=1.520203976322743837090722962557E-02;
  x[43]=3.991050679521320199150125063170E-01;  w[43]=1.530809329199024279577479035197E-02;
  x[44]=4.144599597306983795874657516833E-01;  w[44]=1.539918951557629582527209066711E-02;
  x[45]=4.298984313819430025382928306499E-01;  w[45]=1.547523942524552803545745405245E-02;
  x[46]=4.454053982099694386498356379889E-01;  w[46]=1.553616871378327678188124849612E-02;
  x[47]=4.609657085932816755757812643424E-01;  w[47]=1.558191784810497061697365239752E-02;
  x[48]=4.765641587892041619589633683063E-01;  w[48]=1.561244212742467739329921272429E-02;
  x[49]=4.921855077892284824336854853755E-01;  w[49]=1.562771172693167009981607407099E-02;
  x[50]=5.078144922107715730774657458824E-01;  w[50]=1.562771172693167009981607407099E-02;
  x[51]=5.234358412107957825298854004359E-01;  w[51]=1.561244212742467739329921272429E-02;
  x[52]=5.390342914067183244242187356576E-01;  w[52]=1.558191784810497061697365239752E-02;
  x[53]=5.545946017900305058390131307533E-01;  w[53]=1.553616871378327678188124849612E-02;
  x[54]=5.701015686180569419505559380923E-01;  w[54]=1.547523942524552803545745405245E-02;
  x[55]=5.855400402693016204125342483167E-01;  w[55]=1.539918951557629582527209066711E-02;
  x[56]=6.008949320478680355961387249408E-01;  w[56]=1.530809329199024279577479035197E-02;
  x[57]=6.161512409224869646351407936891E-01;  w[57]=1.520203976322743837090722962557E-02;
  x[58]=6.312940601857517375350425936631E-01;  w[58]=1.508113255258456374130471289163E-02;
  x[59]=6.463085940192360157041662205302E-01;  w[59]=1.494548979666643698238637227860E-02;
  x[60]=6.611801719502645724446665553842E-01;  w[60]=1.479524402995631773838347555738E-02;
  x[61]=6.758942631862108196827421124908E-01;  w[61]=1.463054205531915535898335178899E-02;
  x[62]=6.904364908123149513485827810655E-01;  w[62]=1.445154480056261118992022574048E-02;
  x[63]=7.047926458391507997802705176582E-01;  w[63]=1.425842716119757151715941034809E-02;
  x[64]=7.189487010860157178981921788363E-01;  w[64]=1.405137782955058999012631915093E-02;
  x[65]=7.328908248866790042796992565854E-01;  w[65]=1.383059911039618249117832959882E-02;
  x[66]=7.466053946040954736318440154719E-01;  w[66]=1.359630672328845067686753367298E-02;
  x[67]=7.600790099408815114756521325035E-01;  w[67]=1.334872959178547494052402555553E-02;
  x[68]=7.732985060325470172415407432709E-01;  w[68]=1.308810961977284470503235525030E-02;
  x[69]=7.862509663106905799523360656167E-01;  w[69]=1.281470145510407374067618491154E-02;
  x[70]=7.989237351235893846990165911848E-01;  w[70]=1.252877224078981395483101124455E-02;
  x[71]=8.113044301018539350422997813439E-01;  w[71]=1.223060135397852424277154170795E-02;
  x[72]=8.233809542570647010961693013087E-01;  w[72]=1.192048013298409141202949257377E-02;
  x[73]=8.351415078015704818170661383192E-01;  w[73]=1.159871159262703538272987202618E-02;
  x[74]=8.465745996779010518196173507022E-01;  w[74]=1.126561012816815372794554406255E-02;
  x[75]=8.576690587865282155988211343356E-01;  w[75]=1.092150120812366252687208856287E-02;
  x[76]=8.684140449010103735005827729765E-01;  w[76]=1.056672105626384715326704366589E-02;
  x[77]=8.787990592598535766200029684114E-01;  w[77]=1.020161632310473236173731237386E-02;
  x[78]=8.888139548247477872422450673184E-01;  w[78]=9.826543747217662827520001656012E-03;
  x[79]=8.984489461951572497611095968750E-01;  w[79]=9.441869806687444577342205320747E-03;
  x[80]=9.076946191695880461480783196748E-01;  w[80]=9.047970361064078606561089657134E-03;
  x[81]=9.165419399442004122491312045895E-01;  w[81]=8.645230284161796799335952812271E-03;
  x[82]=9.249822639397956569595748987922E-01;  w[82]=8.234043088072597743609648546226E-03;
  x[83]=9.330073442485822265979322764906E-01;  w[83]=7.814810538773019413238962727064E-03;
  x[84]=9.406093396925092608995555565343E-01;  w[84]=7.387942263720664870518817224365E-03;
  x[85]=9.477808224853634389006629135110E-01;  w[85]=6.953855351859393289781774427638E-03;
  x[86]=9.545147854912647833458549939678E-01;  w[86]=6.512973946485772595849095267795E-03;
  x[87]=9.608046490726669386361891156412E-01;  w[87]=6.065728831489716754710173063359E-03;
  x[88]=9.666442675215397573040831957769E-01;  w[88]=5.612557011592982439407428785216E-03;
  x[89]=9.720279350681280128299022180727E-01;  w[89]=5.153901287434486597205385294274E-03;
  x[90]=9.769503914627458707187201980560E-01;  w[90]=4.690209826847212964961997272439E-03;
  x[91]=9.814068271279077215751840412850E-01;  w[91]=4.221935734834489709066396301296E-03;
  x[92]=9.853928878818531966743421435240E-01;  w[92]=3.749536627732346933533635890967E-03;
  x[93]=9.889046792434591504061813793669E-01;  w[93]=3.273474225422597864293416947135E-03;
  x[94]=9.919387703530284650099702048465E-01;  w[94]=2.794214001932574485687066356832E-03;
  x[95]=9.944921976214958769801910420938E-01;  w[95]=2.312225031711068450740453883441E-03;
  x[96]=9.965624685187217668413950377726E-01;  w[96]=1.827980600663169259700868707341E-03;
  x[97]=9.981475673665625159003411681624E-01;  w[97]=1.341962685776740661983130742385E-03;
  x[98]=9.992459753197979743788437190233E-01;  w[98]=8.546963267590209408636203747278E-04;
  x[99]=9.998568633867206401077964983415E-01;  w[99]=3.673172452527929889194713286571E-04;

  for(int i=0;i<n;i++) INT += w[i]*f(x[i]*Xf_M_Xi+x_init, par_in, conv);

  return INT*Xf_M_Xi;
}
#endif
